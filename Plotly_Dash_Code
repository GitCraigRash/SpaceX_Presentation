##Plotly Dash
##Open a Plotly Dash App
##Type these commands in Terminal
#wget "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_dash.csv"

#wget "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_3/spacex_dash_app.py"

##Replace spacex_dash_app.py code with Skeleton.
##Skeleton
#python3 -m pip install pandas dash
#wget "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_dash.csv"
#wget "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_3/spacex_dash_app.py"
#python3 spacex_dash_app.py
# Import required libraries
import pandas as pd
import dash
from dash import html
from dash import dcc
from dash.dependencies import Input, Output
import plotly.express as px
from itertools import compress
# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                dcc.Dropdown(id='site-dropdown',options=[
                                {'label':'All_sites',   'value':'ALL'},
                                {'label':'CCAFS LC-40', 'value':'CCAFS LC-40'},
                                {'label':'VAFB SLC-4E', 'value':'VAFB SLC-4E'},
                                {'label':'KSC LC-39A',  'value':'KSC LC-39A'},
                                {'label':'CCAFS SLC-40','value':'CCAFS SLC-40'},
                                ],placeholder="Select a Launch Site",value='class',searchable=True),
                                # The default select value is for ALL sites
                                
                                

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                dcc.Graph(id='success-pie-chart'),
                                html.Br(),
                                

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                
                                dcc.RangeSlider(id='payload-slider',min=0,max=10000,step=1000,marks={0:'0',10000:'10000'},value=[min_payload,max_payload]),
                                html.Div(id='output-container-range-slider'),
                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
# Function decorator to specify function input and output
@app.callback(  Output(component_id='success-pie-chart', component_property='figure'),
                Input(component_id='site-dropdown', component_property='value')
                )

def get_pie_chart(entered_site):
    
    
    if entered_site == 'ALL':
        fig = px.pie(spacex_df, values=(spacex_df.loc[spacex_df['class']==1].value_counts()), names=spacex_df['Launch Site'].loc[spacex_df['class']==1], 
        title='Successful Launches')
        return fig
    else:
        fig=px.pie(spacex_df, 
        values=spacex_df['class'].loc[spacex_df['Launch Site']==str(entered_site)].value_counts(),
        names=spacex_df['class'].unique()
        )
        return fig
def update_output(value):
    return f'You have selected'

# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback(Output(component_id='success-payload-scatter-chart', component_property='figure'),
            [Input(component_id='site-dropdown', component_property='value'),
             Input(component_id="payload-slider", component_property="value")]
            )
def get_scatter_chart(entered_site,value):
    value1=value[0]
    value2=value[1]
    series=spacex_df['Payload Mass (kg)'].between(value1,value2)
    filtered_df=spacex_df[series.values]
    if entered_site == 'ALL':
        fig = px.scatter(filtered_df, 
        x=filtered_df['Payload Mass (kg)'], 
        y=filtered_df['class'], 
        color=filtered_df['Booster Version Category'],
        title=str(value1)+' '+str(value2))
        return fig
    else:
        fig = px.scatter(spacex_df, 
        x=filtered_df['Payload Mass (kg)'].loc[spacex_df['Launch Site']==str(entered_site)], 
        y=filtered_df['class'].loc[spacex_df['Launch Site']==str(entered_site)],
        color=filtered_df['Booster Version Category'].loc[spacex_df['Launch Site']==str(entered_site)],
        title=str(value1)+' '+str(value2))
        return fig
# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
    
 ## Run program with 
 #python3 spacex_dash_app.py
